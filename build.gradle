/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.0/userguide/building_java_projects.html
 */

buildscript {
    ext {
        groovyVersion = "3.0.16"
        lombokVersion = '1.18.22'
        spockVersion = '2.3-groovy-3.0'
        springBootVersion = '2.4.2'
        springDependencyManagementVersion = '1.0.11.RELEASE'
    }
}


plugins {
    id "java"

    id 'groovy'

    id 'application'

    id 'checkstyle'

    id 'jacoco'

    id 'org.springframework.boot' version "${springBootVersion}"

    id 'io.spring.dependency-management' version "${springDependencyManagementVersion}"

}

group = 'pl.futurecollars'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '15'


repositories {

    mavenCentral()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(15)
        vendor = JvmVendorSpec.ADOPTOPENJDK
    }
}

dependencies {
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    compileOnly "org.projectlombok:lombok:${lombokVersion}"

    implementation 'org.springframework.boot:spring-boot-starter-web'

    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"

    testImplementation "org.codehaus.groovy:groovy:${groovyVersion}"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    testImplementation "org.spockframework:spock-core:${spockVersion}"

    testImplementation "org.spockframework:spock-spring:${spockVersion}"
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}


test {
    finalizedBy jacocoTestReport // report is always generated after tests run
    finalizedBy jacocoTestCoverageVerification
}


bootJar {
    enabled = false
}


jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

jacoco {
    toolVersion = "0.8.8"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir') as Directory
}

jacocoTestReport {
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'BRANCH'
                minimum = 0.85
            }
        }
        rule {
            limit {
                counter = 'LINE'
                minimum = 0.85
            }
        }
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: 'pl/futurecollars/invoicing/InvoiceApplication.class')
        }))
    }

    checkstyle {
        showViolations = true
        ignoreFailures = false
        maxWarnings = 0
        maxErrors = 0
    }
}