/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.0/userguide/building_java_projects.html
 */

buildscript {
    ext {
        lombokVersion = '1.18.22'
        spockVersion = '2.3-groovy-3.0'
        springBootVersion = '2.4.2'
        springDependencyManagementVersion = '1.0.11.RELEASE'
        springFoxStarterVersion = '3.0.0'
        springFoxUiVersion = '3.0.0'
    }
}


plugins {
    // Apply the groovy plugin to also add support for Groovy (needed for Spock)
    id 'groovy'

    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'

    id 'checkstyle'

    id 'jacoco'

    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${springDependencyManagementVersion}"

    id 'java'





}

group = 'pl.futurecollars'
version = '0.0.1-SNAPSHOT'

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(14)
        vendor = JvmVendorSpec.ADOPTOPENJDK
    }
}


dependencies {
    implementation "org.projectlombok:lombok:${lombokVersion}"

    // Use the latest Groovy version for Spock testing
    testImplementation 'org.codehaus.groovy:groovy:3.0.13'

    // Use the awesome Spock testing and specification framework even with Java
    testImplementation "org.spockframework:spock-core:${spockVersion}"
    testImplementation "org.spockframework:spock-spring:${spockVersion}"
    testImplementation 'junit:junit:4.13.2'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:31.1-jre'

    //Lombok -> lekcja 2
    annotationProcessor("org.projectlombok:lombok:${lombokVersion}")
    testAnnotationProcessor("org.projectlombok:lombok:${lombokVersion}")
    compileOnly("org.projectlombok:lombok:${lombokVersion}")
    testCompileOnly("org.projectlombok:lombok:${lombokVersion}")

    //jackson - lekcja 3
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.11.1'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.11.1'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.11.1'

    //spring - lekcja 4
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    implementation "io.springfox:springfox-boot-starter:${springFoxStarterVersion}"
    implementation "io.springfox:springfox-swagger-ui:${springFoxUiVersion}"

    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    runtimeOnly 'org.postgresql:postgresql:42.2.19'
    runtimeOnly 'com.h2database:h2:1.4.200'
    implementation "org.flywaydb:flyway-core:7.6.0"

}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

checkstyle {
    showViolations = true
    ignoreFailures = false
    maxWarnings = 0
    maxErrors = 0
}

//lesson 4 -> fixing build problems
bootJar {
    enabled = false
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
    finalizedBy jacocoTestCoverageVerification
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

jacoco {
    toolVersion = "0.8.8"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir') as Directory
}

jacocoTestReport {
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'BRANCH'
                minimum = 0.00
            }
        }
        rule {
            limit {
                counter = 'LINE'
                minimum = 0.00
            }
        }
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['pl/futurecollars/invoicing/InvoiceApplication.class', 'pl/futurecollars/invoicing/db/DatabaseConfiguration.class'])
        }))
    }
}